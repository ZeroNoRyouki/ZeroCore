buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

ext.configFile = file "project.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mod_version_major}.${config.mod_version_api}.${config.mod_version_minor}.${config.mod_version_patch}"
group = "${config.group_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "zerocore-${config.minecraft_version}"

ext.dependencies = "required-after:forge@[${config.forge_version_minDep},${config.forge_version_maxDep}); after:cofhcore"
ext.fullVersion = project.config.minecraft_version + '-' + project.version

minecraft {
    version = "${config.forge_version}"

	if (file("../../run/run-${config.minecraft_version}").exists()) {
		runDir = "../../run/run-${config.minecraft_version}"
	} else {
		runDir = "run"
	}

    mappings = "${config.minecraft_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

sourceCompatibility = targetCompatibility = "1.7"
compileJava {
    sourceCompatibility = targetCompatibility = "1.7"
}

configurations {
    deployerJars
}

dependencies {
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'resources'
        }
    }
    api {
        java {
            srcDir 'CoFHLib/src/main/java'
            exclude '**/cofh/lib/**'
            exclude '**/IGeneratorParser.java'
        }
    }
}

processResources  {

    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.ext.fullVersion
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {

        include 'mcmod.info'
        expand 'version':project.ext.fullVersion, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

compileJava.doFirst {

    File file = new File(projectDir, 'build/sources/main/java/it/zerono/mods/zerocore/internal/ZeroCore.java')
    String source = file.getText('UTF-8')
            .replaceAll('version = "0.0.0.0"', 'version = "' + project.ext.fullVersion + '"')
            .replaceAll('acceptedMinecraftVersions = ""', 'acceptedMinecraftVersions = "' + config.minecraft_version + '"')
            .replaceAll('dependencies = "required-after:forge"', 'dependencies = "' + project.ext.dependencies + '"')

    file.write(source, 'UTF-8')
}

jar {

    from sourceSets.main.output
    from sourceSets.api.output
    classifier = ""
}

//Creates the source jar.
task sourcesJar(type: Jar, dependsOn: classes) {

    from sourceSets.main.allSource
	from sourceSets.api.allSource
    classifier = 'sources'
}

//Creates the JavaDoc jar.
task javadocJar(type: Jar, dependsOn: javadoc) {

    from javadoc.destinationDir
    classifier = 'javadoc'
}

//Creates the deobfuscated jar.
task deobfJar(type: Jar) {

    from sourceSets.main.output
	from sourceSets.api.output
    classifier = "deobf"
}

artifacts {

	archives jar
    archives deobfJar
    archives sourcesJar
    archives javadocJar
}

uploadArchives {

    repositories {

        mavenDeployer {
            repository(url: "file://C:\\MC\\ForgeDEV\\Mod Workspace\\ZeroCore\\maven")
            pom.version = project.ext.fullVersion
            pom.artifactId = 'zerocore'
        }
    }
}

//Prevents incomplete JavaDocs from preventing a build on Java 8.
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {

            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
